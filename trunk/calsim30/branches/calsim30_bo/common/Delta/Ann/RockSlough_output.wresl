! R.Wilbur & S. Wu 5/10/05

!****************************************************************************************

! maximum export given the sacramento river flow

define RS_MaxExport_1 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSMax1 {
  lhs RS_MaxExport_1
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.}
  case CritRelax {
    condition wyt_SAC==Critical .and. RS_m_1_sv >= 1.0
    rhs 999999.}
  case NoSalinityControlPossible{
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    rhs 999999.}
  case NegSlope{
    condition RS_m_1_sv <= 0.0
    rhs 999999.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap}
  /*case NegCarriage{
    condition abs(RS_m_1_sv) >= 1.0
    rhs 999999.}*/
  case Normal {
    condition always
    rhs RS_m_1_sv*C_SAC041_ANN + RS_m_1_sv*C_YBP002 + RS_b_1_sv}
}

define RS_MaxExport_2 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSMax2 {
  lhs RS_MaxExport_2
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.}
  case NoSalinityControlPossible{
    condition abs(RS_m_2_sv) <= 0.001 .and. int(RS_b_2_sv) == 0
    rhs ExportCap}
  case NegSlope{
    condition RS_m_2_sv <= 0.0
    rhs 999999.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap}
  case NegCarriage{
    condition RS_m_2_sv >= 1.0
    rhs 999999.}
  case Normal {
    condition always
    rhs RS_m_2_sv*C_SAC041_ANN + RS_m_2_sv*C_YBP002 + RS_b_2_sv}
}

define RS_MaxExport_3 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSMax3 {
  lhs RS_MaxExport_3
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 999999.}
  case NoSalinityControlPossible{
    condition abs(RS_m_3_sv) <= 0.001 .and. int(RS_b_3_sv) == 0
    rhs ExportCap}
  case NegSlope{
    condition RS_m_3_sv <= 0.0
    rhs 999999.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap}
  case NegCarriage{
    condition RS_m_3_sv >= 1.0
    rhs 999999.}
  case Normal {
    condition always
    rhs RS_m_3_sv*C_SAC041_ANN + RS_m_3_sv*C_YBP002 + RS_b_3_sv}
}


!****************************************************************************************

! required delta outflow given exports

define RS_MRDO_1 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSmrdo1 {
  lhs RS_MRDO_1
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case CritRelax {
    condition wyt_SAC==Critical .and. RS_m_1_sv >= 1.0
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_1_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  /*case NegCarriage{
    condition abs(RS_m_1_sv) >= 1.0
    rhs 999999.}*/
  case Normal {
    condition always
    rhs ((1-RS_m_1_sv)/RS_m_1_sv)*D409 - RS_b_1_sv/RS_m_1_sv + C_SJR056 + C_CLV004 + I_MOK014 + SG_SAC017_492 + C_CSL005A + I_MSH015 - D408 - net_delta_cu}
}

define RS_MRDO_2 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSmrdo2 {
  lhs RS_MRDO_2
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_2_sv) <= 0.001 .and. int(RS_b_2_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_2_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition RS_m_2_sv >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs ((1-RS_m_2_sv)/RS_m_2_sv)*D409 - RS_b_2_sv/RS_m_2_sv + C_SJR056 + I_MOK014 + SG_SAC017_492 + C_CSL005A + CT_Woodland + I_MSH015 - D408 - net_delta_cu}
}

define RS_MRDO_3 {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRSmrdo3 {
  lhs RS_MRDO_3
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_3_sv) <= 0.001 .and. int(RS_b_3_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_3_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition RS_m_3_sv >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs ((1-RS_m_3_sv)/RS_m_3_sv)*D409 - RS_b_3_sv/RS_m_3_sv + C_SJR056 + C_CLV004 + I_MOK014 + SG_SAC017_492 + C_CSL005A + CT_Woodland + I_MSH015 - D408 - net_delta_cu}
    }

!****************************************************************************************

! required sac flow given exports

define RS_ReqSac1{lower unbounded upper unbounded kind 'FLOW' units 'cfs'}
goal set_RS_ReqSac1 {
  lhs RS_ReqSac1
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case CritRelax {
    condition wyt_SAC==Critical .and. RS_m_1_sv >= 1.0
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_1_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  /*case NegCarriage{
    condition abs(RS_m_1_sv) >= 1.0
    rhs 999999.}*/
  case Normal {
    condition always
    rhs D409/RS_m_1_sv - RS_b_1_sv/RS_m_1_sv}
}

define RS_ReqSac2 {lower unbounded upper unbounded kind 'FLOW' units 'cfs'}
goal set_RS_ReqSac2 {
  lhs RS_ReqSac2
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_2_sv) <= 0.001 .and. int(RS_b_2_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_2_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition RS_m_2_sv >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs D409/RS_m_2_sv - RS_b_2_sv/RS_m_2_sv}
}

define RS_ReqSac3 {lower unbounded upper unbounded kind 'FLOW' units 'cfs'}
goal set_RS_ReqSac3 {
  lhs RS_ReqSac3
  case LowCL{
    condition C_SAC041_ANN(-1) >=40000.
    rhs 0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_3_sv) <= 0.001 .and. int(RS_b_3_sv) == 0
    rhs 0.}
  case NegSlope{
    condition RS_m_3_sv <= 0.0
    rhs 0.}
  case HighCost{
    condition RS_Sac_ZeroExp_sv2 >= ANNcap
    rhs 0.}
  case NegCarriage{
    condition RS_m_3_sv >= 1.0
    rhs 0.}
  case Normal {
    condition always
    rhs D409/RS_m_3_sv - RS_b_3_sv/RS_m_3_sv}
}
