! R.Wilbur & S. Wu 5/10/05
/*

    ARTIFICIAL NEURAL NETWORK
    DELTA SALINITY MODELING

    ANN determines salinity (micro-mhos/cm) at various locations in the Delta given flows
    (Sac, SWP pumping, CVP pumping, SJR, Channel depletions) and the Delta cross-channel
    position for the past 118 days

    In this CALSIM modeling implementation the 78 days are split into three parts: previous two months
    and current month.  The previous months flows and gate positions are known values, while the
    current month flows (at least SAC and Exports) are unknown variables. These
    are the 2 knobs used to meet salinity standards in the Delta.

    this part of WRESL code defines some variables used for X2 estimation with ANN.

   AVE_TYPE KEY:
      1 = monthly average
      2 = first day of month value
      3 = last day of month value
      4 = maximum daily value
      5 = minimum daily vlaue
      6 = maximum 14-day value
      7 = average for first 15 days
      8 = average for last 15 days

*/

define monthly_ave {value 1}
define first_day {value 2}
define last_day {value 3}
define max_day {value 4}
define min_day {value 5}
define max_14day_running_ave {value 6}
define ave_first_15days {value 7}
define ave_last_15days {value 8}

!define daysindv {alias daysin kind 'DAYS' units 'DAYS'}

! Delta uplands accretion/depletion at OMR027, OMR039 and SJR056
define DD_50_PA1	{timeseries kind 'DELTA-DEPLETION' units 'TAF' convert 'CFS'}
define DD_50_PA2	{timeseries kind 'DELTA-DEPLETION' units 'TAF' convert 'CFS'}
define DD_50_PU		{timeseries kind 'DELTA-DEPLETION' units 'TAF' convert 'CFS'}

define DA_50_PA1	{timeseries kind 'DELTA-ACCRETION' units 'TAF' convert 'CFS'}
define DA_50_PA2	{timeseries kind 'DELTA-ACCRETION' units 'TAF' convert 'CFS'}
define DA_50_PU		{timeseries kind 'DELTA-ACCRETION' units 'TAF' convert 'CFS'}

define DD_OMR039_OMR_adjdv{lower -99999 upper 99999 kind 'DELTA-NET-DEPLETION' units 'CFS'}
define DD_OMR039_OMR_adj{
	case octBgnWY {  ! special case for first wateryear
       	  condition month == OCT .and. wateryear == bgnWY
	  value (20/60.6)*(1-Rfactor_644b)*dem_D700_pag*taf_cfs} !The diversion less the return flow assuming 100% allocation, i.e. the depletion
	case other { 
       	  condition always
       	  value perdv_cvpag_s(-1)*(20/60.6)*(1-Rfactor_644b)*dem_D700_pag*taf_cfs}} !The diversion less the return flow using actual allocation, i.e. the depletion
       	  
goal setDD_OMR039_OMR_adjdv {DD_OMR039_OMR_adjdv = DD_OMR039_OMR_adj}

define DD_SJR056_OMR_adjdv{lower -99999 upper 99999 kind 'DELTA-NET-DEPLETION' units 'CFS'}
define DD_SJR056_OMR_adj{
	case octBgnWY {  ! special case for first wateryear
       	  condition month == OCT .and. wateryear == bgnWY
	  value (20/60.6)*(1-Rfactor_644c-Rfactor_644d)*dem_D700_pag*taf_cfs} !The diversion less the return flow assuming 100% allocation, i.e. the depletion
	case other { 
       	  condition always
       	  value perdv_cvpag_s(-1)*(20/60.6)*(1-Rfactor_644c-Rfactor_644d)*dem_D700_pag*taf_cfs}} !The diversion less the return flow using actual allocation, i.e. the depletion
       	  
goal setDD_SJR056_OMR_adjdv {DD_SJR056_OMR_adjdv = DD_SJR056_OMR_adj}

!*************************************************************************************************************
! define the other flows that go into making the export component
!define net_delta_cu { value DND_OMR + DD_OMR027_OMR_adj + DND_MOK + DND_SJR_East + DND_SJR_West + DND_SAC_South}   ! Net Delta Consumptive Use
define net_delta_cu { value                       ! Net Delta Consumptive Use
!        DND_SAC_North +    ! Don't include this because it occurs upstream of C_SAC041
        DND_SAC_South +
        DND_SAC_West +
        DND_MOK +
        DND_SJR_East +
        DND_SJR_West +
        DND_OMR +
        DD_50_PU - DD_OMR039_OMR_adj - DA_50_PU + DD_50_PA1 - DD_SJR056_OMR_adj - DA_50_PA1 + DD_50_PA2 - DA_50_PA2
}

define net_DICU{ lower unbounded kind 'DICU_FLOW' units 'CFS' }!shengjun add 2/24/2005
goal def_net_DICU{ net_DICU=
!        DND_SAC_North +    ! Don't include this because it occurs upstream of C_SAC041
        DND_SAC_South +
        DND_SAC_West +
        DND_MOK +
        DND_SJR_East +
        DND_SJR_West +
        DND_OMR +
        DD_50_PU - DD_OMR039_OMR_adj - DA_50_PU + DD_50_PA1 - DD_SJR056_OMR_adj - DA_50_PA1 + DD_50_PA2 - DA_50_PA2
}

! Net Delta Consumptive Use decision variable for calculating ANN MRDO
define net_delta_cuDV { ALIAS net_DICU KIND 'NET-DICU' UNITS 'CFS' }

!*************************************************************************************************************
! other defines
define DXC { std kind 'GATE-DAYS-OPEN' units 'NONE'}
define sac_oth { lower unbounded kind 'FLOW-INFLOW' units 'CFS' }
define exp_oth { lower unbounded kind 'FLOW-EXPORTS' units 'CFS' }
define VernWQfinal {std kind 'Salinity-EC' units 'umhos/cm'}
define MRDO_X2nocapdv {std KIND 'FLOW-REQ-MRDO' UNITS 'CFS'}

!*************************************************************************************************************
